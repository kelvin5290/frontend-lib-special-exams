{"version":3,"file":"thunks.js","names":["_logging","require","_frontendPlatform","_api","_helpers","_slice","_constants","_handlers","_constants2","_interopRequireDefault","_proctorio","obj","__esModule","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","key","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","_typeof","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","_regeneratorRuntime","prototype","n","hasOwnProperty","i","a","iterator","c","asyncIterator","u","toStringTag","define","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","self","args","err","handleAPIError","dispatch","message","detail","setApiError","errorMsg","EXAM_START_TIMEOUT_MILLISECONDS","updateAttemptAfter","courseId","sequenceId","promiseToBeResolvedFirst","noLoading","_ref","_callee","response","attemptData","_callee$","_context","setIsLoading","isLoading","exam_attempt_id","t0","fetchExamAttemptsData","setExamState","exam","activeAttempt","isEmpty","active_attempt","t1","_x","getExamAttemptsData","getLatestAttemptData","_ref2","_callee2","_callee2$","_context2","fetchLatestAttempt","_x2","getProctoringSettings","_ref3","_callee3","getState","proctoringSettings","_callee3$","_context3","specialExams","id","logError","fetchProctoringSettings","course_id","setProctoringSettings","_x3","_x4","examRequiresAccessToken","_ref4","_callee4","examAccessToken","_callee4$","_context4","getConfig","EXAMS_BASE_URL","fetchExamAccessToken","setExamAccessToken","_x5","_x6","startTimedExam","_ref5","_callee5","_callee5$","_context5","content_id","createExamAttempt","use_legacy_attempt_api","_x7","_x8","createProctoredExamAttempt","_ref6","_callee6","_callee6$","_context6","_x9","_x10","startProctoredExam","_ref7","_callee7","_ref8","attempt","_ref9","workerUrl","useWorker","examHasLtiProvider","startExamTimeoutMilliseconds","_callee7$","_context7","desktop_application_js_url","window","Worker","useLegacyAttemptApi","workerPromiseForEventNames","actionToMessageTypesMap","start","external_id","continueAttempt","attempt_id","attemptId","attemptStatus","attempt_status","examId","notifyStartExam","_x11","_x12","skipProctoringExam","_ref10","_callee8","_callee8$","_context8","declineAttempt","_x13","_x14","pollAttempt","url","_ref11","_callee9","currentAttempt","data","updatedAttempt","_callee9$","_context9","ExamStatus","READY_TO_SUBMIT","pollExamAttempt","time_remaining_seconds","status","setActiveAttempt","SUBMITTED","expireExamAttempt","_x15","_x16","stopExam","_ref12","_callee10","_getState$specialExam","examUrl","useLegacyAttemptAPI","_callee10$","_context10","exam_url_path","stopAttempt","location","href","_x17","_x18","continueExam","_ref13","_callee11","_callee11$","_context11","_x19","_x20","resetExam","_ref14","_callee12","_callee12$","_context12","resetAttempt","_x21","_x22","submitExam","_ref15","_callee13","_getState$specialExam2","_ref16","attemptExternalId","handleBackendProviderSubmission","_callee13$","_context13","submit","submitAttempt","_x23","_x24","expireExam","_ref17","_callee14","_getState$specialExam3","_ref18","_callee14$","_context14","_x25","_x26","pingAttempt","timeoutInSeconds","_ref19","_callee16","_getState$specialExam4","_callee16$","_context16","pingApplication","_ref20","_callee15","_callee15$","_context15","endExamWithFailure","_x29","_x27","_x28","startProctoringSoftwareDownload","_ref21","_callee17","_callee17$","_context17","softwareDownloadAttempt","_x30","_x31","getExamReviewPolicy","_ref22","_callee18","_callee18$","_context18","fetchExamReviewPolicy","setReviewPolicy","policy","review_policy","_x32","_x33","getExamProgress","_ref23","_callee19","_callee19$","_context19","fetchExamProgress","setExamProgress","_x34","_x35","getAllowProctoringOptOut","allowProctoringOptOut","setAllowProctoringOptOut","checkExamEntry","_ref24","_callee20","_callee20$","_context20","exam_type","ExamType","PROCTORED","IS_PROCTORED_STATUS","race","checkAppStatus","setTimeout","_x36","_x37"],"sources":["../../src/data/thunks.js"],"sourcesContent":["import { logError } from '@edx/frontend-platform/logging';\nimport { getConfig } from '@edx/frontend-platform';\nimport {\n  fetchExamAttemptsData,\n  fetchLatestAttempt,\n  createExamAttempt,\n  stopAttempt,\n  continueAttempt,\n  submitAttempt,\n  pollExamAttempt,\n  fetchProctoringSettings,\n  softwareDownloadAttempt,\n  fetchExamReviewPolicy,\n  fetchExamProgress,\n  resetAttempt,\n  declineAttempt,\n  endExamWithFailure,\n  fetchExamAccessToken,\n} from './api';\nimport { isEmpty } from '../helpers';\nimport {\n  setIsLoading,\n  setExamState,\n  expireExamAttempt,\n  setActiveAttempt,\n  setProctoringSettings,\n  setExamAccessToken,\n  setReviewPolicy,\n  setExamProgress,\n  setApiError,\n  setAllowProctoringOptOut,\n} from './slice';\nimport { ExamStatus, ExamType, IS_PROCTORED_STATUS } from '../constants';\nimport { workerPromiseForEventNames, pingApplication } from './messages/handlers';\nimport actionToMessageTypesMap from './messages/constants';\nimport { checkAppStatus, notifyStartExam } from './messages/proctorio';\n\nfunction handleAPIError(error, dispatch) {\n  const { message, detail } = error;\n  dispatch(setApiError({ errorMsg: message || detail }));\n}\n\nconst EXAM_START_TIMEOUT_MILLISECONDS = 5000;\n\n/**\n * Fetch attempt data and update exam state after performing another action if it is provided.\n * It is assumed that action somehow modifies attempt in the backend, that's why the state needs\n * to be updated.\n * @param courseId - id of a course\n * @param sequenceId - id of a sequence\n * @param promiseToBeResolvedFirst - a promise that should get resolved before fetching attempt data\n * @param noLoading - if set to false shows spinner while executing the function\n */\nfunction updateAttemptAfter(courseId, sequenceId, promiseToBeResolvedFirst = null, noLoading = false) {\n  return async (dispatch) => {\n    if (!noLoading) { dispatch(setIsLoading({ isLoading: true })); }\n    if (promiseToBeResolvedFirst) {\n      try {\n        const response = await promiseToBeResolvedFirst;\n        if (!response || !response.exam_attempt_id) {\n          if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n          return;\n        }\n      } catch (error) {\n        handleAPIError(error, dispatch);\n        if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n      }\n    }\n    try {\n      const attemptData = await fetchExamAttemptsData(courseId, sequenceId);\n      dispatch(setExamState({\n        exam: attemptData.exam,\n        activeAttempt: !isEmpty(attemptData.active_attempt) ? attemptData.active_attempt : null,\n      }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    } finally {\n      if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n    }\n  };\n}\n\nexport function getExamAttemptsData(courseId, sequenceId) {\n  return updateAttemptAfter(courseId, sequenceId);\n}\n\nexport function getLatestAttemptData(courseId) {\n  return async (dispatch) => {\n    dispatch(setIsLoading({ isLoading: true }));\n    try {\n      const attemptData = await fetchLatestAttempt(courseId);\n      dispatch(setExamState({\n        exam: attemptData.exam,\n        activeAttempt: !isEmpty(attemptData.active_attempt) ? attemptData.active_attempt : null,\n      }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    } finally {\n      dispatch(setIsLoading({ isLoading: false }));\n    }\n  };\n}\n\nexport function getProctoringSettings() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to get exam settings. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch proctoring settings. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const proctoringSettings = await fetchProctoringSettings(exam.course_id, exam.id);\n      dispatch(setProctoringSettings({ proctoringSettings }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function examRequiresAccessToken() {\n  return async (dispatch, getState) => {\n    if (!getConfig().EXAMS_BASE_URL) {\n      return;\n    }\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to get exam access token. No exam id.');\n      return;\n    }\n    try {\n      const examAccessToken = await fetchExamAccessToken(exam.id);\n      dispatch(setExamAccessToken({ examAccessToken }));\n    } catch (error) {\n      logError('Exam access token was not granted.');\n    }\n  };\n}\n\n/**\n * Start a timed exam\n */\nexport function startTimedExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to start exam. No exam id.');\n      handleAPIError(\n        { message: 'Failed to start exam. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id,\n      exam.content_id,\n      createExamAttempt(exam.id, exam.use_legacy_attempt_api),\n    )(dispatch);\n  };\n}\n\nexport function createProctoredExamAttempt() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to create exam attempt. No exam id.');\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id,\n      exam.content_id,\n      createExamAttempt(exam.id, exam.use_legacy_attempt_api, false, true),\n    )(dispatch);\n  };\n}\n\n/**\n * Start a proctored exam (including onboarding and practice exams)\n */\nexport function startProctoredExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    const { attempt } = exam || {};\n    if (!exam.id) {\n      logError('Failed to start proctored exam. No exam id.');\n      return;\n    }\n    const { desktop_application_js_url: workerUrl } = attempt || {};\n    const useWorker = window.Worker && workerUrl;\n    const examHasLtiProvider = !exam.useLegacyAttemptApi;\n\n    if (useWorker) {\n      const startExamTimeoutMilliseconds = EXAM_START_TIMEOUT_MILLISECONDS;\n      workerPromiseForEventNames(actionToMessageTypesMap.start, exam.attempt.desktop_application_js_url)(\n        startExamTimeoutMilliseconds,\n        attempt.external_id,\n      ).then(() => updateAttemptAfter(\n        exam.course_id,\n        exam.content_id,\n        continueAttempt(attempt.attempt_id, attempt.use_legacy_attempt_api),\n      )(dispatch))\n        .catch(error => {\n          const message = error?.message || 'Worker failed to respond.';\n          logError(\n            message,\n            {\n              attemptId: attempt.attempt_id,\n              attemptStatus: attempt.attempt_status,\n              courseId: attempt.course_id,\n              examId: exam.id,\n            },\n          );\n          handleAPIError(\n            { message: 'Something has gone wrong starting your exam. Please double-check that the application is running.' },\n            dispatch,\n          );\n        });\n    } else {\n      if (examHasLtiProvider) {\n        notifyStartExam();\n      }\n      await updateAttemptAfter(\n        exam.course_id,\n        exam.content_id,\n        continueAttempt(attempt.attempt_id, attempt.use_legacy_attempt_api),\n      )(dispatch);\n    }\n  };\n}\n\nexport function skipProctoringExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to skip proctored exam. No exam id.');\n      return;\n    }\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptApi = exam.use_legacy_attempt_api;\n    if (attemptId) {\n      await updateAttemptAfter(\n        exam.course_id,\n        exam.content_id,\n        declineAttempt(attemptId, useLegacyAttemptApi),\n      )(dispatch);\n    } else {\n      await updateAttemptAfter(\n        exam.course_id,\n        exam.content_id,\n        createExamAttempt(exam.id, true, false, useLegacyAttemptApi),\n      )(dispatch);\n    }\n  };\n}\n\n/**\n * Poll exam active attempt status.\n * @param url - poll attempt url\n */\nexport function pollAttempt(url) {\n  return async (dispatch, getState) => {\n    const currentAttempt = getState().specialExams.activeAttempt;\n\n    // If the learner is in a state where they've finished the exam\n    // and the attempt can be submitted (i.e. they are \"ready_to_submit\"),\n    // don't ping the proctoring app (which action could move\n    // the attempt into an error state).\n    if (currentAttempt && currentAttempt.attempt_status === ExamStatus.READY_TO_SUBMIT) {\n      return;\n    }\n\n    try {\n      const { exam } = getState().specialExams;\n      const data = await pollExamAttempt(url, exam.content_id);\n      if (!data) {\n        throw new Error('Poll Exam failed to fetch.');\n      }\n      const updatedAttempt = {\n        ...currentAttempt,\n        time_remaining_seconds: data.time_remaining_seconds,\n        attempt_status: data.status,\n      };\n      dispatch(setActiveAttempt({\n        activeAttempt: updatedAttempt,\n      }));\n      if (data.status === ExamStatus.SUBMITTED) {\n        dispatch(expireExamAttempt());\n      }\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function stopExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().specialExams;\n\n    if (!activeAttempt) {\n      logError('Failed to stop exam. No active attempt.');\n      handleAPIError(\n        { message: 'Failed to stop exam. No active attempt was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    const {\n      attempt_id: attemptId,\n      exam_url_path: examUrl,\n      use_legacy_attempt_api: useLegacyAttemptAPI,\n    } = activeAttempt;\n    if (!exam.attempt || attemptId !== exam.attempt.attempt_id) {\n      try {\n        await stopAttempt(attemptId, useLegacyAttemptAPI);\n        window.location.href = examUrl;\n      } catch (error) {\n        handleAPIError(error, dispatch);\n      }\n      return;\n    }\n\n    await updateAttemptAfter(exam.course_id, exam.content_id, stopAttempt(attemptId, useLegacyAttemptAPI))(dispatch);\n  };\n}\n\nexport function continueExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    if (!attemptId) {\n      logError('Failed to continue exam. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to continue exam. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id,\n      exam.content_id,\n      continueAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n  };\n}\n\nexport function resetExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    if (!attemptId) {\n      logError('Failed to reset exam attempt. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to reset exam attempt. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(exam.course_id, exam.content_id, resetAttempt(attemptId, useLegacyAttemptAPI))(dispatch);\n  };\n}\n\nexport function submitExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().specialExams;\n    const { desktop_application_js_url: workerUrl, external_id: attemptExternalId } = activeAttempt || {};\n    const useWorker = window.Worker && activeAttempt && workerUrl;\n\n    const handleBackendProviderSubmission = () => {\n      // if a backend provider is being used during the exam\n      // send it a message that exam is being submitted\n      if (useWorker) {\n        workerPromiseForEventNames(actionToMessageTypesMap.submit, workerUrl)(0, attemptExternalId)\n          .catch(() => handleAPIError(\n            { message: 'Something has gone wrong submitting your exam. Please double-check that the application is running.' },\n            dispatch,\n          ));\n      }\n    };\n\n    if (!activeAttempt) {\n      logError('Failed to submit exam. No active attempt.');\n      handleAPIError(\n        { message: 'Failed to submit exam. No active attempt was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    const {\n      attempt_id: attemptId,\n      exam_url_path: examUrl,\n      use_legacy_attempt_api: useLegacyAttemptAPI,\n    } = activeAttempt;\n    if (!exam.attempt || attemptId !== exam.attempt.attempt_id) {\n      try {\n        await submitAttempt(attemptId, useLegacyAttemptAPI);\n        window.location.href = examUrl;\n        handleBackendProviderSubmission();\n      } catch (error) {\n        handleAPIError(error, dispatch);\n      }\n      return;\n    }\n\n    await updateAttemptAfter(exam.course_id, exam.content_id, submitAttempt(attemptId, useLegacyAttemptAPI))(dispatch);\n    handleBackendProviderSubmission();\n  };\n}\n\nexport function expireExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().specialExams;\n    const {\n      desktop_application_js_url: workerUrl,\n      attempt_id: attemptId,\n      external_id: attemptExternalId,\n      use_legacy_attempt_api: useLegacyAttemptAPI,\n    } = activeAttempt || {};\n    const useWorker = window.Worker && activeAttempt && workerUrl;\n\n    if (!attemptId) {\n      logError('Failed to expire exam. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to expire exam. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    // this sure looks like a bug\n    await updateAttemptAfter(\n      activeAttempt.course_id,\n      exam.content_id,\n      submitAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n    dispatch(expireExamAttempt());\n\n    if (useWorker) {\n      workerPromiseForEventNames(actionToMessageTypesMap.submit, workerUrl)(0, attemptExternalId)\n        .catch(() => handleAPIError(\n          { message: 'Something has gone wrong submitting your exam. Please double-check that the application is running.' },\n          dispatch,\n        ));\n    }\n  };\n}\n\n/**\n * Ping provider application (used for proctored exams).\n * @param timeoutInSeconds - time to wait for worker response before raising an error\n * @param workerUrl - location of the worker from the provider\n */\nexport function pingAttempt(timeoutInSeconds, workerUrl) {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().specialExams;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    await pingApplication(timeoutInSeconds, activeAttempt.external_id, workerUrl)\n      .catch(async (error) => {\n        const message = error?.message || 'Worker failed to respond.';\n        /**\n         * Note: The exam id logged here represents the current section being rendered.\n         * This may be different from the exam they are currently attempting\n         * if the learner has navigated to other course content during the exam.\n         * */\n        logError(\n          message,\n          {\n            attemptId: activeAttempt.attempt_id,\n            attemptStatus: activeAttempt.attempt_status,\n            courseId: activeAttempt.course_id,\n            examId: exam.id,\n          },\n        );\n\n        // eslint-disable-next-line function-paren-newline\n        await updateAttemptAfter(\n          exam.course_id,\n          exam.content_id,\n          endExamWithFailure(activeAttempt.attempt_id, message, useLegacyAttemptAPI),\n        )(dispatch);\n      });\n  };\n}\n\nexport function startProctoringSoftwareDownload() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    if (!attemptId) {\n      logError('Failed to start downloading proctoring software. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to start downloading proctoring software. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id,\n      exam.content_id,\n      softwareDownloadAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n  };\n}\n\nexport function getExamReviewPolicy() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to fetch exam review policy. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch exam review policy. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const data = await fetchExamReviewPolicy(exam.course_id);\n      dispatch(setReviewPolicy({ policy: data.review_policy }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\nexport function getExamProgress() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to fetch exam review policy. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch exam review policy. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const data = await fetchExamProgress(exam.id);\n      dispatch(setExamProgress(data));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function getAllowProctoringOptOut(allowProctoringOptOut) {\n  return (dispatch) => {\n    dispatch(setAllowProctoringOptOut({ allowProctoringOptOut }));\n  };\n}\n\n/**\n * Check if we are allowed to enter an exam where proctoring has started.\n * There is no support for reentry with LTI. The exam must be completed\n * in the proctored window. If a non-proctored window is opened, the exam will\n * be ended with an error.\n *\n * This check is necessary to prevent using a second browser to access the exam\n * content unproctored.\n */\nexport function checkExamEntry() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    // Check only applies to LTI exams\n    if (\n      !exam?.attempt\n      || exam.attempt.exam_type !== ExamType.PROCTORED\n      || exam.attempt.use_legacy_attempt_api\n    ) { return; }\n\n    if (IS_PROCTORED_STATUS(exam.attempt.attempt_status)) {\n      Promise.race([\n        checkAppStatus(),\n        new Promise((resolve, reject) => {\n          setTimeout(() => reject(), EXAM_START_TIMEOUT_MILLISECONDS);\n        }),\n      ]).catch(() => {\n        dispatch(setApiError({ errorMsg: 'Something has gone wrong with your exam. Proctoring application not detected.' }));\n        updateAttemptAfter(exam.course_id, exam.content_id, endExamWithFailure(exam.attempt.attempt_id, 'exam reentry disallowed', useLegacyAttemptAPI))(dispatch);\n      });\n    }\n  };\n}\n"],"mappings":"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"}