{"version":3,"file":"Exam.js","names":["_react","_interopRequireWildcard","require","_reactRedux","_propTypes","_interopRequireDefault","_i18n","_paragon","_icons","_timer","_instructions","_ExamAPIError","_constants","_messages","_data","_jsxRuntime","obj","__esModule","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","Array","from","test","len","length","arr2","r","l","t","Symbol","iterator","e","u","a","f","next","done","push","value","isArray","Exam","_ref","isGated","isTimeLimited","originalUserIsStaff","canAccessProctoredExams","children","intl","_useSelector","useSelector","state","specialExams","isLoading","activeAttempt","exam","apiErrorMsg","dispatch","useDispatch","showTimer","IS_STARTED_STATUS","attempt_status","_ref2","attempt","examType","type","examId","id","passedDueDate","passed_due_date","hideAfterDue","hide_after_due","_ref3","attemptStatus","shouldShowMasqueradeAlert","ExamType","TIMED","ExamStatus","STARTED","_useState","useState","_useState2","hasProctoredExamAccess","setHasProctoredExamAccess","proctoredExamTypes","ONBOARDING","PRACTICE","PROCTORED","useEffect","includes","getProctoringSettings","jsx","className","Spinner","animation","variant","formatMessage","messages","proctoredExamAccessDenied","sequenceContent","Fragment","jsxs","Alert","icon","Info","FormattedMessage","defaultMessage","ExamTimerBlock","propTypes","PropTypes","bool","isRequired","element","intlShape","defaultProps","_default","exports","injectIntl"],"sources":["../../src/exam/Exam.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Alert, Spinner } from '@openedx/paragon';\nimport { Info } from '@openedx/paragon/icons';\nimport { ExamTimerBlock } from '../timer';\nimport Instructions from '../instructions';\nimport ExamAPIError from './ExamAPIError';\nimport { ExamStatus, ExamType, IS_STARTED_STATUS } from '../constants';\nimport messages from './messages';\nimport { getProctoringSettings } from '../data';\n\n/**\n * Exam component is intended to render exam instructions before and after exam.\n * It is also responsible for rendering exam timer block/component during the exam.\n * If children do not relate to exam sequence, render them directly.\n * @param isTimeLimited - boolean used to identify if we need to process sequence as an exam\n * @param children - sequence content\n * @returns {JSX.Element}\n * @constructor\n */\nconst Exam = ({\n  isGated, isTimeLimited, originalUserIsStaff, canAccessProctoredExams, children, intl,\n}) => {\n  const {\n    isLoading, activeAttempt, exam, apiErrorMsg,\n  } = useSelector(state => state.specialExams);\n  const dispatch = useDispatch();\n\n  const showTimer = !!(activeAttempt && IS_STARTED_STATUS(activeAttempt.attempt_status));\n\n  const {\n    attempt,\n    type: examType,\n    id: examId,\n    passed_due_date: passedDueDate,\n    hide_after_due: hideAfterDue,\n  } = exam || {};\n  const { attempt_status: attemptStatus } = attempt || {};\n\n  const shouldShowMasqueradeAlert = () => {\n    // if course staff is masquerading as a specific learner, they should be able\n    // to view the exam content regardless of the learner's current state\n    if (originalUserIsStaff && isTimeLimited) {\n      if (examType === ExamType.TIMED && passedDueDate && !hideAfterDue) {\n        // if the learner is able to view exam content after the due date is passed,\n        // don't show this alert\n        return false;\n      }\n      return attemptStatus !== ExamStatus.STARTED;\n    }\n    return false;\n  };\n\n  const [hasProctoredExamAccess, setHasProctoredExamAccess] = useState(true);\n\n  const proctoredExamTypes = [ExamType.ONBOARDING, ExamType.PRACTICE, ExamType.PROCTORED];\n\n  useEffect(() => {\n    if (proctoredExamTypes.includes(examType)) {\n      // only fetch proctoring settings for a proctored exam\n      if (examId) {\n        dispatch(getProctoringSettings());\n      }\n\n      // Only exclude Timed Exam when restricting access to exams\n      setHasProctoredExamAccess(canAccessProctoredExams);\n    }\n    // this makes sure useEffect gets called only one time after the exam has been fetched\n    // we can't leave this empty since initially exam is just an empty object, so\n    // API calls above would not get triggered\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [examId, dispatch]);\n\n  if (isLoading) {\n    return (\n      <div data-testid=\"spinner\" className=\"d-flex justify-content-center align-items-center flex-column my-5 py-5\">\n        <Spinner animation=\"border\" variant=\"primary\" />\n      </div>\n    );\n  }\n\n  if (!hasProctoredExamAccess) {\n    // If the user cannot acces proctoring exam, and the current exam is a proctoring exam,\n    // we want to display a message box to let learner know they have no access.\n    return (\n      <div data-testid=\"no-access\" className=\"d-flex justify-content-center align-items-center flex-column\">\n        {intl.formatMessage(messages.proctoredExamAccessDenied)}\n      </div>\n    );\n  }\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  const sequenceContent = <>{children}</>;\n\n  return (\n    <div className=\"d-flex flex-column justify-content-center\">\n      {shouldShowMasqueradeAlert() && (\n        <Alert variant=\"info\" icon={Info} data-testid=\"masquerade-alert\">\n          <FormattedMessage\n            id=\"exam.hiddenContent\"\n            defaultMessage=\"This exam is hidden from the learner.\"\n          />\n        </Alert>\n      )}\n      {showTimer && (\n        <ExamTimerBlock />\n      )}\n      { // show the error message only if you are in the exam sequence\n        isTimeLimited && apiErrorMsg && <ExamAPIError />\n      }\n      {isTimeLimited && !originalUserIsStaff && !isGated\n        ? <Instructions>{sequenceContent}</Instructions>\n        : sequenceContent}\n    </div>\n  );\n};\n\nExam.propTypes = {\n  isTimeLimited: PropTypes.bool.isRequired,\n  isGated: PropTypes.bool.isRequired,\n  originalUserIsStaff: PropTypes.bool.isRequired,\n  canAccessProctoredExams: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  intl: intlShape.isRequired,\n};\n\nExam.defaultProps = {\n  canAccessProctoredExams: true,\n};\n\nexport default injectIntl(Exam);\n"],"mappings":";;;;;;;AAAA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,KAAA,GAAAJ,OAAA;AACA,IAAAK,QAAA,GAAAL,OAAA;AACA,IAAAM,MAAA,GAAAN,OAAA;AACA,IAAAO,MAAA,GAAAP,OAAA;AACA,IAAAQ,aAAA,GAAAL,sBAAA,CAAAH,OAAA;AACA,IAAAS,aAAA,GAAAN,sBAAA,CAAAH,OAAA;AACA,IAAAU,UAAA,GAAAV,OAAA;AACA,IAAAW,SAAA,GAAAR,sBAAA,CAAAH,OAAA;AACA,IAAAY,KAAA,GAAAZ,OAAA;AAAgD,IAAAa,WAAA,GAAAb,OAAA;AAAA,SAAAG,uBAAAW,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAAA,SAAAE,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAlB,wBAAAe,GAAA,EAAAG,WAAA,SAAAA,WAAA,IAAAH,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,aAAAO,OAAA,CAAAP,GAAA,yBAAAA,GAAA,uCAAAA,GAAA,UAAAQ,KAAA,GAAAN,wBAAA,CAAAC,WAAA,OAAAK,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAT,GAAA,YAAAQ,KAAA,CAAAE,GAAA,CAAAV,GAAA,SAAAW,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAhB,GAAA,QAAAgB,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAnB,GAAA,EAAAgB,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAf,GAAA,EAAAgB,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAhB,GAAA,CAAAgB,GAAA,SAAAL,MAAA,cAAAX,GAAA,MAAAQ,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAArB,GAAA,EAAAW,MAAA,YAAAA,MAAA;AAAA,SAAAW,eAAAC,GAAA,EAAAC,CAAA,WAAAC,eAAA,CAAAF,GAAA,KAAAG,qBAAA,CAAAH,GAAA,EAAAC,CAAA,KAAAG,2BAAA,CAAAJ,GAAA,EAAAC,CAAA,KAAAI,gBAAA;AAAA,SAAAA,iBAAA,cAAAC,SAAA;AAAA,SAAAF,4BAAAG,CAAA,EAAAC,MAAA,SAAAD,CAAA,qBAAAA,CAAA,sBAAAE,iBAAA,CAAAF,CAAA,EAAAC,MAAA,OAAAE,CAAA,GAAApB,MAAA,CAAAI,SAAA,CAAAiB,QAAA,CAAAf,IAAA,CAAAW,CAAA,EAAAK,KAAA,aAAAF,CAAA,iBAAAH,CAAA,CAAAM,WAAA,EAAAH,CAAA,GAAAH,CAAA,CAAAM,WAAA,CAAAC,IAAA,MAAAJ,CAAA,cAAAA,CAAA,mBAAAK,KAAA,CAAAC,IAAA,CAAAT,CAAA,OAAAG,CAAA,+DAAAO,IAAA,CAAAP,CAAA,UAAAD,iBAAA,CAAAF,CAAA,EAAAC,MAAA;AAAA,SAAAC,kBAAAT,GAAA,EAAAkB,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAlB,GAAA,CAAAmB,MAAA,EAAAD,GAAA,GAAAlB,GAAA,CAAAmB,MAAA,WAAAlB,CAAA,MAAAmB,IAAA,OAAAL,KAAA,CAAAG,GAAA,GAAAjB,CAAA,GAAAiB,GAAA,EAAAjB,CAAA,IAAAmB,IAAA,CAAAnB,CAAA,IAAAD,GAAA,CAAAC,CAAA,UAAAmB,IAAA;AAAA,SAAAjB,sBAAAkB,CAAA,EAAAC,CAAA,QAAAC,CAAA,WAAAF,CAAA,gCAAAG,MAAA,IAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,4BAAAE,CAAA,QAAAG,CAAA,EAAAhB,CAAA,EAAAT,CAAA,EAAA0B,CAAA,EAAAC,CAAA,OAAAC,CAAA,OAAAtB,CAAA,iBAAAN,CAAA,IAAAsB,CAAA,GAAAA,CAAA,CAAA3B,IAAA,CAAAyB,CAAA,GAAAS,IAAA,QAAAR,CAAA,QAAAhC,MAAA,CAAAiC,CAAA,MAAAA,CAAA,UAAAM,CAAA,uBAAAA,CAAA,IAAAH,CAAA,GAAAzB,CAAA,CAAAL,IAAA,CAAA2B,CAAA,GAAAQ,IAAA,MAAAH,CAAA,CAAAI,IAAA,CAAAN,CAAA,CAAAO,KAAA,GAAAL,CAAA,CAAAT,MAAA,KAAAG,CAAA,GAAAO,CAAA,iBAAAR,CAAA,IAAAd,CAAA,OAAAG,CAAA,GAAAW,CAAA,yBAAAQ,CAAA,YAAAN,CAAA,eAAAI,CAAA,GAAAJ,CAAA,cAAAjC,MAAA,CAAAqC,CAAA,MAAAA,CAAA,2BAAApB,CAAA,QAAAG,CAAA,aAAAkB,CAAA;AAAA,SAAA1B,gBAAAF,GAAA,QAAAe,KAAA,CAAAmB,OAAA,CAAAlC,GAAA,UAAAA,GAAA,IAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMmC,IAAI,GAAG,SAAPA,IAAIA,CAAAC,IAAA,EAEJ;EAAA,IADJC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAEC,aAAa,GAAAF,IAAA,CAAbE,aAAa;IAAEC,mBAAmB,GAAAH,IAAA,CAAnBG,mBAAmB;IAAEC,uBAAuB,GAAAJ,IAAA,CAAvBI,uBAAuB;IAAEC,QAAQ,GAAAL,IAAA,CAARK,QAAQ;IAAEC,IAAI,GAAAN,IAAA,CAAJM,IAAI;EAEpF,IAAAC,YAAA,GAEI,IAAAC,uBAAW,EAAC,UAAAC,KAAK;MAAA,OAAIA,KAAK,CAACC,YAAY;IAAA,EAAC;IAD1CC,SAAS,GAAAJ,YAAA,CAATI,SAAS;IAAEC,aAAa,GAAAL,YAAA,CAAbK,aAAa;IAAEC,IAAI,GAAAN,YAAA,CAAJM,IAAI;IAAEC,WAAW,GAAAP,YAAA,CAAXO,WAAW;EAE7C,IAAMC,QAAQ,GAAG,IAAAC,uBAAW,EAAC,CAAC;EAE9B,IAAMC,SAAS,GAAG,CAAC,EAAEL,aAAa,IAAI,IAAAM,4BAAiB,EAACN,aAAa,CAACO,cAAc,CAAC,CAAC;EAEtF,IAAAC,KAAA,GAMIP,IAAI,IAAI,CAAC,CAAC;IALZQ,OAAO,GAAAD,KAAA,CAAPC,OAAO;IACDC,QAAQ,GAAAF,KAAA,CAAdG,IAAI;IACAC,MAAM,GAAAJ,KAAA,CAAVK,EAAE;IACeC,aAAa,GAAAN,KAAA,CAA9BO,eAAe;IACCC,YAAY,GAAAR,KAAA,CAA5BS,cAAc;EAEhB,IAAAC,KAAA,GAA0CT,OAAO,IAAI,CAAC,CAAC;IAA/BU,aAAa,GAAAD,KAAA,CAA7BX,cAAc;EAEtB,IAAMa,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAA,EAAS;IACtC;IACA;IACA,IAAI7B,mBAAmB,IAAID,aAAa,EAAE;MACxC,IAAIoB,QAAQ,KAAKW,mBAAQ,CAACC,KAAK,IAAIR,aAAa,IAAI,CAACE,YAAY,EAAE;QACjE;QACA;QACA,OAAO,KAAK;MACd;MACA,OAAOG,aAAa,KAAKI,qBAAU,CAACC,OAAO;IAC7C;IACA,OAAO,KAAK;EACd,CAAC;EAED,IAAAC,SAAA,GAA4D,IAAAC,eAAQ,EAAC,IAAI,CAAC;IAAAC,UAAA,GAAA5E,cAAA,CAAA0E,SAAA;IAAnEG,sBAAsB,GAAAD,UAAA;IAAEE,yBAAyB,GAAAF,UAAA;EAExD,IAAMG,kBAAkB,GAAG,CAACT,mBAAQ,CAACU,UAAU,EAAEV,mBAAQ,CAACW,QAAQ,EAAEX,mBAAQ,CAACY,SAAS,CAAC;EAEvF,IAAAC,gBAAS,EAAC,YAAM;IACd,IAAIJ,kBAAkB,CAACK,QAAQ,CAACzB,QAAQ,CAAC,EAAE;MACzC;MACA,IAAIE,MAAM,EAAE;QACVT,QAAQ,CAAC,IAAAiC,2BAAqB,EAAC,CAAC,CAAC;MACnC;;MAEA;MACAP,yBAAyB,CAACrC,uBAAuB,CAAC;IACpD;IACA;IACA;IACA;IACA;EACF,CAAC,EAAE,CAACoB,MAAM,EAAET,QAAQ,CAAC,CAAC;EAEtB,IAAIJ,SAAS,EAAE;IACb,oBACE,IAAAvE,WAAA,CAAA6G,GAAA;MAAK,eAAY,SAAS;MAACC,SAAS,EAAC,wEAAwE;MAAA7C,QAAA,eAC3G,IAAAjE,WAAA,CAAA6G,GAAA,EAACrH,QAAA,CAAAuH,OAAO;QAACC,SAAS,EAAC,QAAQ;QAACC,OAAO,EAAC;MAAS,CAAE;IAAC,CAC7C,CAAC;EAEV;EAEA,IAAI,CAACb,sBAAsB,EAAE;IAC3B;IACA;IACA,oBACE,IAAApG,WAAA,CAAA6G,GAAA;MAAK,eAAY,WAAW;MAACC,SAAS,EAAC,8DAA8D;MAAA7C,QAAA,EAClGC,IAAI,CAACgD,aAAa,CAACC,oBAAQ,CAACC,yBAAyB;IAAC,CACpD,CAAC;EAEV;;EAEA;EACA,IAAMC,eAAe,gBAAG,IAAArH,WAAA,CAAA6G,GAAA,EAAA7G,WAAA,CAAAsH,QAAA;IAAArD,QAAA,EAAGA;EAAQ,CAAG,CAAC;EAEvC,oBACE,IAAAjE,WAAA,CAAAuH,IAAA;IAAKT,SAAS,EAAC,2CAA2C;IAAA7C,QAAA,GACvD2B,yBAAyB,CAAC,CAAC,iBAC1B,IAAA5F,WAAA,CAAA6G,GAAA,EAACrH,QAAA,CAAAgI,KAAK;MAACP,OAAO,EAAC,MAAM;MAACQ,IAAI,EAAEC,WAAK;MAAC,eAAY,kBAAkB;MAAAzD,QAAA,eAC9D,IAAAjE,WAAA,CAAA6G,GAAA,EAACtH,KAAA,CAAAoI,gBAAgB;QACftC,EAAE,EAAC,oBAAoB;QACvBuC,cAAc,EAAC;MAAuC,CACvD;IAAC,CACG,CACR,EACA/C,SAAS,iBACR,IAAA7E,WAAA,CAAA6G,GAAA,EAACnH,MAAA,CAAAmI,cAAc,IAAE,CAClB;IACC;IACA/D,aAAa,IAAIY,WAAW,iBAAI,IAAA1E,WAAA,CAAA6G,GAAA,EAACjH,aAAA,WAAY,IAAE,CAAC,EAEjDkE,aAAa,IAAI,CAACC,mBAAmB,IAAI,CAACF,OAAO,gBAC9C,IAAA7D,WAAA,CAAA6G,GAAA,EAAClH,aAAA,WAAY;MAAAsE,QAAA,EAAEoD;IAAe,CAAe,CAAC,GAC9CA,eAAe;EAAA,CAChB,CAAC;AAEV,CAAC;AAED1D,IAAI,CAACmE,SAAS,GAAG;EACfhE,aAAa,EAAEiE,qBAAS,CAACC,IAAI,CAACC,UAAU;EACxCpE,OAAO,EAAEkE,qBAAS,CAACC,IAAI,CAACC,UAAU;EAClClE,mBAAmB,EAAEgE,qBAAS,CAACC,IAAI,CAACC,UAAU;EAC9CjE,uBAAuB,EAAE+D,qBAAS,CAACC,IAAI;EACvC/D,QAAQ,EAAE8D,qBAAS,CAACG,OAAO,CAACD,UAAU;EACtC/D,IAAI,EAAEiE,eAAS,CAACF;AAClB,CAAC;AAEDtE,IAAI,CAACyE,YAAY,GAAG;EAClBpE,uBAAuB,EAAE;AAC3B,CAAC;AAAC,IAAAqE,QAAA,GAAAC,OAAA,cAEa,IAAAC,gBAAU,EAAC5E,IAAI,CAAC"}